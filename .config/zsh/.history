ls .config/ohmyposh
ls .config/ohmyposh/
oh-my-posh
man ps
ps -aux
ps -aux | grep Code
sudo pacman -Sy testdisk
man testdisk
mkdir recovery
cd recovery
cat image.dd
testdisk image.dd
sudo testdisk
rm testdisk.log
sleep 0.5
rm .ipynb_checkpoints
rm -rf .ipynb_checkpoints
mkdir CodeForces
mkdir 967(Div-2)
mkdir '967(Div-2)'
cd 967\(Div-2\)
rm -rf 967\(Div-2\)
mkdir 967-Div-2
cd 967-Div-2
cd Code/CodeForces/967-Div-2
g++ 1.c -o 1
cd lab_2
sudo pacman -S texlive-most\

sudo pacman -Sy texlive-most\

sudo pacman -Sy texlive-core
sudo pacman -S pandoc\

jupyter nbconvert --to pdf Lab_2_U22CS104_ML.ipynb
sudo fmtutil-sys --all\

which xelatex\

jupyter nbconvert --to html Lab_2_U22CS104_ML.ipynb
./Lab_2_U22CS104_ML.html
sudo fmtutil-sys --byfmt xelatex\

mv vertopal.com_Lab_2_U22CS104_ML.pdf Lab_2_U22CS104_ML.pdf
mv Lab_2_U22CS104_ML.pdf ~/Code/ML/lab_2
ls Code/ML/lab_2
ls ~Code/ML/lab_2
ls ~/Code/ML/lab_2
g++ test.cpp -o test
./test
g++ -help
g++ -h
man g++
g++ --help
g++ --v
g++ --help | grep version
g++ --version
ls usb
ping 172.16.1.1:8090
mkdir PPA
cd PPA
mpirun ./1
mpirun -np 10 ./2
mpirun -np 7 ./2
mpirun -np 6 ./2
mpirun -np ./1
mpirun -np ./2
mpirun -np 5 ./2
mpirun -np 3 ./2
mpirun -np 8 ./1
mpirun -np 8 ./2
mpirun -np 1 ./2
ping 172.16.1.1:8090/
ping 10.0.2.15/24
ping 10.0.2.15:24
ping 10.0.2.15
sudo pacman -R nautilus
cd .texlive
./texmf-var
rm -rf .texlive
ls .jupyter
starts
\\
ping google.com
zinit
f
nvim ~/.config/tmux/tmux.conf
realpath man
realpath .zshrc
realpath .config/zsh
man nproc
nproc
gcc temp.c -o temp
./temp
gcc 1.c 2.c 3.c -o 1 2 3
gcc 3.c -o 3
cd Code/SS/lab_2
bluetoothctl pairable on
bluetoothctl info
sudo pacman -Sy bluez
sudo systemctl enable --now bluetooth.service
btusb
sudo lsmod| grep btusb
sudo pacman -Sy blueman
bluemoon
bluetooth-player
cd Self
cd pictures
..\\

nvim .vimrc
rm .vimrc
rm .viminfo
rm -rf .vim
rm -rf recovery
rm downloads
rm -rf downloads
nvim .gitignore
ls .config/zsh/
git commit -m "Checkup Commit"
gh status
gh auth status
gh auth refresh
gh auth log
gh auth login
cd .dotfiles/.config/zsh
ls ../bash
echo PATH
mv .config/zsh/.zshenv ~/.zshenv
mv .zshenv .config/zsh/.zshenv
bat .Xauthority
bat .xinitrc

mv Downloads/tmux-cheatsheet.md ~/.config/tmux/tmux-cheetsheet.md
git push origin main\

sh -c "$(curl -s https://raw.githubusercontent.com/ibhagwan/fzf-lua/main/scripts/mini.sh)"
cp ~/.dotfiles ~/.dots
cp .dotfiles .dotfiles
cp -r  .dotfiles .dotfiles
cp -r  .dotfiles .dots
ls .dots
git ls-files -z -d | xargs -0 git checkout --
rm -rf .dotfiles
cp ~/.dotfiles/.config/nvim/lua/plugins/lsp.lua ~/.dotfiles/.config/nvim-self/lua/plugins/lsp.lua
cp ~/.dotfiles/.config/nvim/lua/config/lsp.lua ~/.dotfiles/.config/nvim-self/lua/config/lsp.lua
cp ~/.dotfiles/.config/nvim/lua/plugins/mason.lua ~/.dotfiles/.config/nvim-self/lua/plugins/mason.lua
cd .local/share/nvim-self/lazy/ui/lua/nvchad
nvim-self
ls .dotfiles/.config
rm -rf nvim-self
nvim nvim/lua/config/lsp.lua
rm -rf .dots
ls i3
ls .config/i3
mv .config/nvm ~/nvm
rm -rf ~/.config/nvm ~/.config/nvim-self
mv ~/nvm ~/.config/nvm
ls ../.bookmarks
rm -rf ~/.bookmarks
ls ../
git commit -m "OOF Added I3, Tries to add GH and NVM but fixed later"
ls /etc/zsh/zprofile
ls /etc/zsh/
cd /etc/zsh
sudo nvim zprofile
fd
cd /etc/X11
cd xinit
cat xinitrc
cat xserverrc
echo $XINITRC
echo $XRESOURCES
echo BASH
echo $BASH
cat .Xauthority 
mkdir .dotfiles/x11
mv .dotfiles/x11 .dotfiles/x
ls .dotfiles
mv .Xauthority .dotfiles/x/Xauthority
mv .xinitrc .dotfiles/x/xinitrc
ls gh
rm -rf gh
absh
mv README README.md
man grep
man grep -r
git branch --verbose
nvim ~/.zshenv
cat .config/tmux/tmux-cheetsheet.md
echo $(tty)
man startx
git commit -m "Fixed xinitrc and Xauthentication, fixed zsh and bashrc files"
man -t startx
man -t startx | Ip
man -t startx | lp
man -t startx | ip
curl cht.sh/cpp/string
curl cht.sh/cpp/polymorphism
curl cht.sh/cpp/int
cd CodeForces
mkdir 968-Div-2
cd 968-Div-2
cd Code/CodeForces/968-Div-2
abcb
12
abcabcabcabc
gcc 2.c -o 2
./q
g++ 3-1.cpp -o 3
g++ 3-2.cpp -o 3
cd .config/zsh
sudo nvim profile
cx() { cd "$@" && l; }\
fcd() { cd "$(find . -type d -not -path '*/.*' | fzf)" && l; }\
f() { echo "$(find . -type f -not -path '*/.*' | fzf)" | pbcopy }\
fv() { nvim "$(find . -type f -not -path '*/.*' | fzf)" }
cx
man l
fcd
lss nvim
lss .config
ff
xclip -o
man xclip
git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm
tmux detach
\
drwx------ 14 yagna yagna 4096 Aug 25 13:38 .config\
drwxr-xr-x  2 yagna yagna 4096 Aug 23 18:18 Desktop\
drwxr-xr-x  2 yagna yagna 4096 Aug 19 13:48 Documents\
drwxr-xr-x  5 yagna yagna 4096 Aug 25 16:30 .dotfiles\
drwxr-xr-x  9 yagna yagna 4096 Aug 25 12:10 Downloads\
drwxr-xr-x  3 yagna yagna 4096 Aug 25 15:54 go\
drwxr-xr-x  3 yagna yagna 4096 Aug 20 14:11 .ipython\
drwxr-xr-x  4 yagna yagna 4096 Aug 20 14:11 .jupyter\
drwx------  6 yagna yagna 4096 Aug 19 14:15 .local\
drwx------  4 yagna yagna 4096 Aug 19 14:14 .mozilla\
drwxr-xr-x  2 yagna yagna 4096 Aug 19 13:48 Music\
drwxr-xr-x  3 yagna yagna 4096 Aug 25 02:11 Pictures\
drwx------  3 yagna yagna 4096 Aug 23 22:32 .pki\
drwxr-xr-x  2 yagna yagna 4096 Aug 19 13:48 Public\

iwctl
chmod 775 ~/.config/tmux/tmux.conf
w
man w
mux ls
tmux attach-session 2
tmux attach 2
fatfetch
0
sudo systemctl enable NetworkManager.service
lspci -k
ip link set interface up
ip link set wlp4s0 up
tmux d
tmux l
tmux kill-session -a
cd .config/tmux
tmux new -n fuck
tmux kill-server
tmux run
tmux start-server
man tmux start
nvim .dotfiles/.config/tmux
tmux start
sed
tmux run-shell -b 'command -v fzf'
bluetoothctl advertise
bluetoothctl advertise on
bluetoothctl man
bluetoothctl help
bluetoothctl list\\

bluetoothctl select 38:D5:7A:13:97:FA
bluetoothctl power on
bluetoothctl agent on

bluetoothctl scan on
bluetoothctl devices
networkctl
tracepath 152.59.35.91
ip help
ip address
iproute2
ip
ip route 152.59.35.91
ip route help
ip route get 152.59.35.91
curl icanhzip.com
curl https://icanhzip.com
curl https://icanhazip.com
less $(fzf)
fzf | cat
echo "\n\n# Get IP\nalias IPP='curl https://icanhazip.com'"  >> $(fzf) 
IPP
ip addr show usb0
ping 127.0.0.1\

hostname -I\

mkdir test
cd test
nvm help
nvm install node
nvm -v
npm
rm -rf go
sudo rm -rf go
ld
echo $ZDOTDIR
q\\
q
npm -v
cd ~/.config
ls nvm
cat nvm/README.md
nvm list-remote
nvm install --lts
nvm list
npm init -y
npm install express nodemon
cd Code/test
node index.js
npm i express
npm start
ip addr show
git commit -m "Tweaked Tmux, an Minor nvim fixes"
gcc test.c
ls ~/Downloads
ls .zen
cd Code/ML/\\
ls
cp Self/pictures/Wallpapers_Desktop/bg.png
cp Self/pictures/Wallpapers_Desktop/bg.png Code/ML/lab_1/bg.png
ls /dev/nvme0n1p3
cd /dev/nvme0n1p3
man unzip
unzip archive\(3\).zip
mv Linear\ Regression\ -\ Sheet1.csv ~/Code/ML
cd ~/Code/ML
mkdir lab_3
mv Linear\ Regression\ -\ Sheet1.csv lab_3
cd lab_
nvim i3
man ls
ls -A
ls -Al
ls -Ab
ls -Ad
ls -d
ls -Af
ls -AF
ls -A --format=WORD
ls -A --format=verbose
ls -A --format=vertical
ls -A --format=long
ls -A --format=commas
ls -A --format=horizontal
ls -A --format=across
ls -A --format=single-column
ls -Ag
ls -Ag --group-directories-first
ls -AgGh --group-directories-first
ls -AgGLh --group-directories-first
ls -AgG --group-directories-first
cd\\

ls -AgGn
ls -AgGnN
ls -AgGnNo
ls -AonN
ls -AonNG
ls -AonNg
ls -AonNGx
ls -AonNgx
ls -AonNgX
ls -lAXZ
ls -oAXZ
ls -AXZ
ls -AX
ls -AX1
ls -lAX
rm test.c a.out
mv CodeForces Code-Forces
cd lab_1
sudo pacman -Sy python-scikit-learn
cd ../lab_2
mv ../lab_3/Linear-Regression.csv Linear-Refression.csv
mv Linear-Refression.csv Linear-Regression.csv
cat csv.h
cat csv.c
gcc -o main csv.c
cd Code/ML/lab_2
cd ../lab_1
cd Code/ML/lab_3
cd ../c
./main\\

gcc -o main main.c csv.c
fh
unzip archive\(4\).zip
mv housing.csv ~/Code/ML/c/Boston-Housing.csv
gcc -o main LR-BH.c csv.c
./main
cd Code/PPA/
mkdir lab_4
cd lab_4
firefox
rofi
cd Code/PPA/lab_3
mpirun -np 1 ./1
mpirun -np 2\ ./1
mpirun -np 2 ./1
mpirun -np 5 ./1
q;
tmux new-session
hi
bye
sudo pacman -Sy starship
sudo pacman -R starship
curl -sS https://starship.rs/install.sh | sh
# Locate and delete the starship binary
sh -c 'rm "$(command -v 'starship')"'
git commit -m "Replaced Telescope with fzf(not keybinds), tweaks with nvim and tmux, will fix tomorrow"
man vim
man nvim
cd Documents
nvi
cd .config/nvim/
sudo pacman -S cmatrix
~q
cd Code/SS/lab_3
rm 0.cpp
mv prod prod.txt
mv prod.txt prod
cd ../lab-2
cd ../lab-3
../lab-3/1
vim Self/notes/Nvim.md
vim $(fzf)
mv alacritty.toml 11
mv 11 alacritty.toml
cd .config/alacritty
COLORTERM
colortest-256
printf "\033[0;32m_hello_\033[0m\n" 
colorpicker --short --one-shot --preview\

cd Code/Code-Forces/969-Div-2
10 21
2 8
51 60
2 15
10 26
1 1000
4 2 3
1 3 4 6
4 7 7
1 1 2 6
3 15 9
1 9 5
3 18 12
1 4 5
7 27 36
33 13 23 12 35 24 41
10 6 9
15 5 6 9 8 2 12 15 3 8
2 1 1000000000
1 1000000000
6 336718728 709848696
552806726 474775724 15129785 371139304 178408298 13106071
6 335734893 671469786
138885253 70095920 456876775 9345665 214704906 375508929
man 1
g++ 5.cpp -o 5
./5
cat \'
rm \'
cd Code/ML/Amazon
unzip archive.zip
lspci | grep Nvdia
lspci | grep VGA
sudo pacman -Syu nvidia cuda
sudo pacman -Sy nvidia cuda
node -v
man cal
sudo pacman -Sy cudnn
cd webi
cd Downloads/archive
git commit -m "Check in commit"
lazygit
cd /mnt
nvim Self/notes/ComputerNetworking
nvim Self/notes/Computer-Networking.md
tmux 
curl -X POST "https://accounts.spotify.com/api/token" \\
     -H "Content-Type: application/x-www-form-urlencoded" \\
     -d "grant_type=client_credentials&client_id=your-client-id&client_secret=your-client-secret"\

curl -X POST "https://accounts.spotify.com/api/token" \\
     -H "Content-Type: application/x-www-form-urlencoded" \\
     -d "grant_type=client_credentials&client_id=7f2dbbab2dbf4a39a0198699bc1c16b5&client_secret=7b6485b7550a4430b98f834d29a9b7a4"\

curl "https://api.spotify.com/v1/artists/4Z8W4fKeB5YxbusRsdQVPb" \\
     -H "Authorization: Bearer  BQDBKJ5eo5jxbtpWjVOj7ryS84khybFpP_lTqzV7uV-T_m0cTfwvdn5BnBSKPxKgEb11"\

curl "https://api.spotify.com/v1/artists/4Z8W4fKeB5YxbusRsdQVPb" \\
     -H "Authorization: Bearer  BQAik7aFMnD9elg8IvUEBpWgXFtF7CrAWAsXZNanDU8qDi4T0PSBeWH8y10l0NRIy8QOj_G69xFNAlGok8fTUobelAYRgivTxR5kdfEkUZqX2OMF-qg"
curl "https://api.spotify.com/v1/artists/4Z8W4fKeB5YxbusRsdQVPb" \\
     -H "Authorization: Bearer  BQAik7aFMnD9elg8IvUEBpWgXFtF7CrAWAsXZNanDU8qDi4T0PSBeWH8y10l0NRIy8QOj_G69xFNAlGok8fTUobelAYRgivTxR5kdfEkUZqX2OMF-qg" >> spotify.json
cat spotify.json
cat \\ 
rm \\ 
rm spotify.json
ls lab_1
ls lab_2
ls lab_3
python3 -m venv ml
pip install numpy
pip remove numpy
pip uninstall numpy
ls .config\

g++ 4Test.cpp -o 4
rm 4Test.cpp
5\
1\
1\
0\
5\
1 2 4 5 3\
10101\
5\
5 4 1 3 2\
10011\
6\
3 5 6 1 2 4\
010000\
6\
1 2 3 4 5 6\
100110\

5\
1\
1\
0\
5\
1 2 4 5 3\
10101\
5\
5 4 1 3 2\
10011\
6\
3 5 6 1 2 4\
010000\
6\
1 2 3 4 5 6\
100110
cat 4.cpp
rm s
rm temp temp1 test
#include <string>
#include <vector>
using namespace std;
int main(int argc, char *argv[]) {
cd Code/Code-Forces/970-Div-3
rm s temp test
ls Self/notes
cat .viminfo
nvim ~/.dotfiles/.config/nvim
cd CICD
mv CICD CI-CD
cd CI-CD
rm -rf lab-1/ lab-2
systemctl enable --now docker.socket
man docker
systemctl --user start docker-desktop
docker compose version
systemctl --user enable docker-desktop
docker desktop
docker desktop version --help
rofi 
docker desktop run
docker desktop --help
docker desktop module ls
docker desktop module update
docker desktop version
sudo systemctl status docker
sudo systemctl start docker-desktop
touch
touch app.py
echo 'print("Hello, Microservices!")\n' >> app.py\

touch Dockerfile
echo '# Step 1: Specify the base image\
FROM python:3.10-slim\
\
# Step 2: Set the working directory inside the image\
WORKDIR /usr/src/app\
\
# Step 3: Copy the application code into the image\
COPY app.py .\
\
# Step 4: Define the command to run the application\
CMD ["python", "app.py"]\
' >> Dockerfile
docker build -t hello-microservices .
docker run hello-microservices\

docker -h
sudo pacman -S gnome-terminal
iptables
ps
tar xzvf docker-27.2.0.tgz
sudo cp docker/* /usr/bin/
sudo dockerd &
sudo docker build -t hello-microservices .
sudo docker login 
docker tag hello-microservices Yagnarao15/hello-microservices:latest
sudo docker tag hello-microservices Yagnarao15/hello-microservices:latest
sudo docker push Yagnarao15/hello-microservices:latest
sudo docker tag hello-microservices yagnarao15/hello-microservices:latest
sudo docker push yagnarao15/hello-microservices:latest
mkdir lab-3
mv Dockerfile lab-3/
mv app.py lab-3
mv Lab_3_U22CS104.odt lab-3
ls lab-3
rm Lab_3_U22CS104.odt
cd lab-3
touch requirements.txt
docker build -t inventory-app .\

sudo docker build -t inventory-app .\

sudo docker run -p 5000:5000 inventory-app\

nvim Code/CI-CD/lab-3
cd lab_3
cd Code/ML/c
yay -Sy pandoc-bin
man pandoc
pandoc -f ipynb -t pdf -o ~/Code/ML/lab-3/Linear-Regression.pdf ~/Code/ML/lab-3/Linear-Regression.ipynb
ipython nbconvert --to latex --post PDF lab-1/NumPy.ipynb
man ipython
pip install nbconvert
python3 venv ml
cat Anaconda3-2024.06-1-Linux-x86_64.sh
6c6c6c6c6c6c6c6c6c6c6c6c6c6c6c6cc
sudo pacman -Sy python-tensorflow
tensorboard
sudo pacman -Sy tensorflow tensorflow-cuda
nvim Code/Code-Forces/970-Div-3
mkdir 971-Div-4
cd 971-Div-4
cd Code/Code-Forces/971-Div-4
cat 2.cpp
mv .local/share/nvim/ .dotfiles/.local/share/nvim/
mv .local/share/nvim-lazy .dotfiles/.local/share/nvim-lazy/
mv .local/share/nvim-kickstart .dotfiles/.local/share/nvim-kickstart/
ls .local/share
ls .dotfiles/.local/share
rm .local/share/nvim
rm .local/share/nvim-kickstart
rm .local/share/nvim-lazy
mv .dotfiles/.local/share/nvim-kickstart .local/share/nvim-kickstart/
mv .dotfiles/.local/share/nvim-lazy .local/share/nvim-lazy/
mv .dotfiles/.local/share/nvim .local/share/nvim
man rename
chmod +x ~/.dotfiles/.local/bin/nvim-name.sh
./.dotfiles/.local/bin/nvim-name.sh
rm ~/.config/Fuck-You
mv .config/Fuck ~/.config
~/.dotfiles/.local/bin/nvim-name.sh Fuck Fuck-You
s
git commit -m "9/11 2024 LOL"
ls\\

cat .bash_history
rm .bash_history
ls .config/zsh/.history
nvim-name.sh
vim ~/.viminfo
vim ~/.vim/vimrc
nvim-own\\
\\

mv Downloads/wallpaperflare.com_wallpaper.jpg Self/pictures/Wallpapers_Desktop/Black-Venom.jpg
git log --graph --pretty=format:'%C(bold blue)%h%Creset %C(cyan)[%cr] %C(magenta)%an%Creset - %Creset%s%C(yellow)%d%Creset' --abbrev-commit \
}
export COLOR_RESET=$'\x1b[0m'\
export COLOR_LACK=$'\x1b[38;2;112;128;144m'\
export COLOR_LUSTER=$'\x1b[38;2;222;238;237m'\
export COLOR_ORANGE=$'\x1b[38;2;255;170;136m'\
export COLOR_GREEN=$'\x1b[38;2;120;153;120m'\
export COLOR_BLUE=$'\x1b[38;2;119;136;170m'\
export COLOR_RED=$'\x1b[38;2;215;0;0m'\
export COLOR_BLACK=$'\x1b[38;2;0;0;0m'\
export COLOR_GRAY1=$'\x1b[38;2;8;8;8m'\
export COLOR_GRAY2=$'\x1b[38;2;25;25;25m'\
export COLOR_GRAY3=$'\x1b[38;2;42;42;42m'\
export COLOR_GRAY4=$'\x1b[38;2;68;68;68m'\
export COLOR_GRAY5=$'\x1b[38;2;85;85;85m'\
export COLOR_GRAY6=$'\x1b[38;2;122;122;122m'\
export COLOR_GRAY7=$'\x1b[38;2;170;170;170m'\
export COLOR_GRAY8=$'\x1b[38;2;204;204;204m'\
export COLOR_GRAY9=$'\x1b[38;2;221;221;221m'\
\
log_red() { echo "${COLOR_RED}$@${COLOR_RESET}" }\
log_luster(){ echo "${COLOR_LUSTER}$@${COLOR_RESET}" }\
log_orange(){ echo "${COLOR_ORANGE}$@${COLOR_RESET}" }\
log_green() { echo "${COLOR_GREEN}$@${COLOR_RESET}" }\
log_blue() { echo "${COLOR_BLUE}$@${COLOR_RESET}" }\
log_black() { echo "${COLOR_BLACK}$@${COLOR_RESET}" }\
log_gray1() { echo "${COLOR_GRAY1}$@${COLOR_RESET}" }\
log_gray2() { echo "${COLOR_GRAY2}$@${COLOR_RESET}" }\
log_gray3() { echo "${COLOR_GRAY3}$@${COLOR_RESET}" }\
log_gray4() { echo "${COLOR_GRAY4}$@${COLOR_RESET}" }\
log_gray5() { echo "${COLOR_GRAY5}$@${COLOR_RESET}" }\
log_gray6() { echo "${COLOR_GRAY6}$@${COLOR_RESET}" }\
log_gray7() { echo "${COLOR_GRAY7}$@${COLOR_RESET}" }\
log_gray8() { echo "${COLOR_GRAY8}$@${COLOR_RESET}" }\
log_gray9() { echo "${COLOR_GRAY9}$@${COLOR_RESET}" }
git log --graph --pretty=format:'%C(bold blue)%h%Creset %C(cyan)[%cr] %C(magenta)%an%Creset - %Creset%s%C(yellow)%d%Creset' --abbrev-commit \

$(fortune -s -n 50)
echo $(fortune -s -n 50)
g++ test.cpp
./a.out
rm a.out test.cpp
cd Code/SS/lab-4
touch prod
g++ -g -o 1 1.cpp
sudo pacman -Sy gdb
gdb ./1
mv ~/Downloads/51.cpp ~/Code/SS/lab-5
g++ 51.cpp -o 1
mv ~/Downloads/5.text ~/Code/SS/lab-5/
cat 5.text
cat prod.txt
mv 66e31d6ee96cd_student_resource_3.zip ~/Code/ML/Amazon
cd ~/Code/ML/Amazon
unzip 66e31d6ee96cd_student_resource_3.zip
cd student_resource\ 3
cd ../../
ping google.com\\
\\

sudo pacman -Sy python-tqdm
cd Code/ML/Amazon/student_resource\ 3
cat README.md
sudo pacman -Sy python-pytesseract
man pytesseract 
pytesseract en images/1yw53vfQtS.jpg
pytesseract -l en images/1yw53vfQtS.jpg
sudo pacman -Sy tesseract-data-eng
sudo pacman -S tesseract\
sudo pacman -S tesseract-data-eng\

pytesseract -l en images/1yw53vfQtS.jpg\

cat Code/ML/Amazon/student_resource\ 3/README.md
cd ../Desktop/\\

curl https://m.media-amazon.com/images/I/71XfHPR36-L.jpg
curl https://m.media-amazon.com/images/I/71XfHPR36-L.jpg --output 71XfHPR36-L.jpg
pytesseract -l en 71XfHPR36-L.jpg
echo TESSDATA_PREFIX
echo $TESSDATA_PREFIX
sudo chmod 755 /usr/share/tessdata/\
sudo chmod 644 /usr/share/tessdata/en.traineddata\

ls /usr/share/tessdata/\

pytesseract -l eng 71XfHPR36-L.jpg
curl https://m.media-amazon.com/images/I/91LPf6OjV9L.jpg --output 1.jpg
pytesseract -l eng 1.jpg
pip install git+https://github.com/faustomorales/keras-ocr.git#egg=keras-ocr
source ml/bin/activate\

pip install keras-ocr
pip install tensorflow
python3 -v
python3 --version
pip install keras-ocr tensorflow==2.4 keras==2.4.3\

touch test.py
echo "import keras_ocr\
\
# Initialize the pipeline again\
pipeline = keras_ocr.pipeline.Pipeline()\
" >> test.py
export CUDA_VISIBLE_DEVICES=""\

nvim /home/yagna/Desktop/ml/lib/python3.12/site-packages/keras_ocr/recognition.py
;w
pip install IPython.display
pip install IPython
nvim test.py
curl https://m.media-amazon.com/images/I/81e2YtCOKvL.jpg --output 2.jpg
curl https://m.media-amazon.com/images/I/71mKPQGo8wL.jpg --output 3.jpg
$((263859 - 234981))
echo $((263859 - 234981))
tesseract --help
sh
pytesseract -l eng 3.jpg
pytesseract -l eng 2.jpg
pytesseract -l eng 2_1.jpg
pytesseract -l eng 3_1.jpg
cd Desktop
tesseract -l eng ./3_1.jpg
tesseract --version\

tesseract --list_langs
tesseract --list-langs
python3 test.py
sudo pacman -S python-pip\
pip install torch torchvision torchaudio\

cat .config/zsh/.history
cat ~/.config/zsh/.history
pip install torch torchvision torchaudio\

sudo pacman -Syu pytorch\

sudo pacman -Syu python-pytorch-cuda
tensorflow
python3
rm .x11
rm .python_history
python3 ml
source ml/bin/activate
pip list --verbose\

rm -rf ~/Code/ML/ml
pip
python venv list
woken
find ~ -type d -name "bin" -exec test -f "{}/activate" \; -print\

cd ~/.local
rm -rf anaconda3
rm -rf ~/.conda ~/.continuum ~/.anaconda_backup\

nvim ~/.config/bash/bash_history
nvim ~/.config/bash/.bashrc
conda\

rm -rf anaconda3\
rm -rf ~/anaconda3\
sudo rm -rf /opt/anaconda3
ls ~/.local/share/virtualenvs/\

conda env list\

python-tensorflow
python3-tensorflow
python -m venv ml
pip install --upgrade pip setuptools\

docker -v
sudo groupadd docker
sudo usermod -aG docker $USER
newgrp docker
sudo systemctl enable docker.service\
\
 sudo systemctl enable containerd.service
docker run hello-world
docker pull tensorflow/tensorflow:latest-gpu-jupyter
sudo docker pull tensorflow/tensorflow:latest-gpu-jupyter
sudo pacman -Sy nvidia-container-toolkit
docker run -it --rm tensorflow/tensorflow:latest-gpu-jupyter \\
   python -c "import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))"
sudo docker run -it --rm tensorflow/tensorflow:latest-gpu-jupyter \\
   python3 -c "import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))"
sudo docker run -it --rm tensorflow/tensorflow \\
   python -c "import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))"
sudo docker run -it --rm tensorflow/tensorflow:latest-gpu-jupyter \\
   python -c "import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))"
docker run -it tensorflow/tensorflow bash\

sudo docker run -it tensorflow/tensorflow bash\

sudo docker run -it tensorflow/tensorflow:latest-gpu-jupyter bash\

sudo docker run -it -p 8888:8888 tensorflow/tensorflow:latest-gpu-jupyter bash\

sudo systemctl start docker\

sudo systemctl status docker\

ls -l /var/run/docker.sock\

echo $USER
sudo usermod -aG docker $USER\

sudo docker run -u $(id -u):$(id -g) -it -p 8888:8888 tensorflow/tensorflow:latest-gpu-jupyter bash\

sudo docker run -u $(id -u):$(id -g) -it -p 8888:8888 tensorflow/tensorflow:latest-gpu-jupyter bash
sudo ldconfig\

docker run -u $(id -u):$(id -g) -it -p 8888:8888 tensorflow/tensorflow:latest-gpu-jupyter bash\

sudo docker run -u root -it -p 8888:8888 tensorflow/tensorflow:latest-gpu-jupyter bash\

docker ps
sudo docker logs 7f4518f69e70\

lspci | grep -i nvidia\

docker run --gpus all --rm nvidia/cuda nvidia-smi
sudo docker run --gpus all --rm nvidia/cuda nvidia-smi
docker run --gpus all -it tensorflow/tensorflow:latest-gpu-jupyter bash\

sudo docker run --gpus all --rm nvidia/cuda:11.7-base nvidia-smi\

sudo nvidia-ctk runtime configure --runtime=docker
sudo systemctl restart docker
nvidia-ctk runtime configure --runtime=docker --config=$HOME/.config/docker/daemon.json
systemctl --user restart docker
sudo systemctl --user restart docker
sudo nvidia-ctk config --set nvidia-container-cli.no-cgroups --in-place
sudo docker run --gpus all -it tensorflow/tensorflow:2.14.0-gpu bash\

pip install tensorflow-gpu==2.4.0\

pip show tensorflow keras-ocr\

pip install tensorflow==2.4.0\

pip install jupyter
pip install ipykernel\
python -m ipykernel install --user --name=keras-ocr --display-name "Python (myenv)"\

pip remove tensorflow
source keras-ocr-env/bin/activate
pip uninstall tensorflow
pip uninstall jupyter
pip uninstall
pip uninstall *
pip uninstall keras-ocr
deactivate
rm -rf keras-ocr-env
python -m venv keras-ocr-env\
source keras-ocr-env/bin/activate  # On Windows, use keras-ocr-env\Scripts\activate\

pip lisr
pip install tensorflow==2.15
python3 -m pip install tensorflow[and-cuda]
python3 -m pip install tensorflow-cuda
python3 -m pip install tensorflow-gpu
python3 -m pip install tensorflow
pip install tensorflow\
\

python3 -c "import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))"\

python3 -c "import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))"\

pip install tensorflow-gpu
cd ~/Desktop
tesseract -l eng 3_1.jpg
tesseract -l eng 3.jpg
tesseract -l eng --oem 3 --psm 6 -3.jpg
tesseract -l eng --oem 3 --psm 6 3.jpg
tesseract -l eng 1.jpg
sudo docker run --gpus all -it tensorflow/tensorflow:latest-gpu-jupyter bash\

sudo docker run --gpus all -it -p 8888:8888 tensorflow/tensorflow:latest-gpu-jupyter bash\

jupyter-notebook
mkdir -p ~/.local/miniconda3\
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/.local/miniconda3/miniconda.sh\
cd ~/.local/miniconda3\
chmod +x miniconda.sh\
./miniconda.sh
./miniconda.sh
conda --version
conda activate
conda create --name ML
conda env \list
sudo pacman -Sy inxi
inxi -G
sudo pacman -Syu nvidia-driver-supported-branches
sudo pacman -Syu nvidia-dkms nvidia-utils nvidia-settings
nvidia-driver-supported-branches
conda install tensorflow-gpu
conda install jupyter
nvim Code/ML
nvim main.py
sudo pacman R python-jupyter
sudo pacman -R jupyter-notebook
sudo pacman -R jupyterlab
sudo pacman -R jupyterlab-pygments
sudo pacman -R jupyter-nbconvert
sudo pacman -R jupyter-server
sudo pacman -R jupyter-notebook-shim
sudo pacman -R python-jupyter-client
sudo pacman -R python-jupyterlab-server
conda install anaconda::keras-ocr
pip install keras-ocr\

cat /home/yagna/.keras-ocr/craft_mlt_25k.h5
lsmod | grep nvidia\

nvidia-settings --version
sudo pacman -Syu\
sudo pacman -S nvidia nvidia-utils nvidia-settings\

sudo dkms status\

uname -r\

conda install pandas numpy matplotlib nlyk sklearn
conda install pandas numpy matplotlib
conda install anaconda::scikit-learn
conda install nltk
conda install csv re
conda install anaconda::csvkit anaconda::regex
cp Code/ML/Amazon/images/2198wsIefsL.jpg Desktop
conda install pytesseract
watch -n 1 nvidia-smi
conda en
nvim .dotfiles/.config/zsh/.zshenv
nvcc --version\

yay -Ss cudnn\

yay -S cudnn\

source ~/.config/zsh/.zshrc
ls /usr/local/cuda/include/cudnn*.h\
ls /usr/local/cuda/lib64/libcudnn*\

sudo ln -s /usr/lib/cudnn*.h /usr/local/cuda/include/\
sudo ln -s /usr/lib/libcudnn* /usr/local/cuda/lib64/\

echo $PATH\
echo $LD_LIBRARY_PATH\

sudo pacman -R cuda cudnn\

yay -S cuda\
yay -S cudnn\

echo $((22000 / 2))
cat Code/ML/Amazon/README.md
man sed
man diff
diff Downloads/notebook807906aa6e\(1\).ipynb
diff Downloads/notebook807906aa6e\(1\).ipynb Downloads/notebook807906aa6e\(2\).ipynb
man bc
vi
Cd Code/PPA
cp ../lab-3/Lab_3_U22CS104_PPA.odt ./
mv Lab_3_U22CS104_PPA.odt Lab_5_U22CS104_PPA.odt
cd ../../CI-CD
mkdir lab-5
cp ../lab-4/Lab_4_U22CS104_CICD.odt ./
conda create --name test
conda deactivate\

sudo pacman -y python-flask
pip list
pip install --upgrade pip\

sudo pacman 
sudo pacman -S python-flask
find /var/cache/pacman/pkg/ -iname "*.part" -delete\

sudo find /var/cache/pacman/pkg/ -iname "*.part" -delete\

sudo fuser /var/lib/pacman/db.lck
rm /var/lib/pacman/db.lck
sudo rm /var/lib/pacman/db.lck
sudo pacman -Sy python-flask
conda activate test
conda list
conda env list
pip install flask\\
\\

pip install flask
curl http://localhost:5000/greet\

curl http://localhost:5000/items\

sudo docker run hello-world
sudo docker run hello-microservices
sudo docker run -it -p 8888:8888 tensorflow/tensorflow:latest-gpu-jupyter bash
cp ../lab-3/requirements.txt ./
sudo docker build -t flask-microservice\

nvim ../lab-3/app.py
sudo docker run -p 5000:5000 inventory-app\\

sudo docker run -p 5000:5000 flask-microservice\

cd Code/PPA/lab-4
mpicc 1.cpp -o 1
mpi++ 1.cpp -o 1
mpicc -o 1 1.cpp
mpicc 1.cpp
mpic++ 1.cpp -o 1
mpirun -np 2 ./2
cat 2.c
ip config
cd Code/SS/lab-5
cd ../lab-4
cd Code/SS/lab-6
ls 
curl https://172.16.1.1:8090
yay -S zen-browser
sudo pacman -Rnsc yay
ya
cd /tmp\
git clone https://aur.archlinux.org/yay.git
cd yay
makepkg -si
yay
cd ..
rm -rf yay\

yay -S zen-browser-bin 1.0.1.a.2-1
pacman -Rcns gnome
sudo pacman -Rcns gnome
sudo pacman -Rcns gnome gnome-shell gnome-session\

sudo pacman -Rns $(pacman -Qdtq)
sudo pacman -Sy nautilus
sudo pacman -R gnome-terminal gnome-tweaks
sudo pacman -R gnome-tweaks
mkdir 973-Div-2
cxd 973-Div-2
cd 973-Div-2
3
1 2
6
100
4 3
9
3 3
g++ 4.cpp -o 4
./4
ping pornhub.com
git clone https://github.com/gabsdotco/init.lua.git ~/.config/nvim-test
ls .config/nvim-test
it commit
p
dmesg
sudo dmesg
aplay -lL
yay -S aplay
sudo pacman -Sy alsa-utils
sudo pacman -Sy pipewire
~/tmp $ pacman -Q | grep pipew
pacman -Q | grep pipew
alsamixer
cd ~/.config/pulse\
ls -l\

pulseaudio -k\
pulseaudio --start\

sudo pacman -S pulseaudio pulseaudio-alsa\

rm -r ~/.config/pulse\

journalctl --user -xe | grep pulse\

pulseaudio -vvv\

killall pulseaudio\

ps aux | grep pulseaudio\

find ~ -type l -lname ~/.config/pulse\

sudo find ~ -type l -lname ~/.config/pulse\

mkdir -p ~/.config/pulse\
touch ~/.config/pulse/cookie\

pulseaudio --start\

pacmd list-sinks\

mkdir 974-Div-3
2
cd 974-Div-3
g++ 3_1.cpp -o 3
sudo pacman -Sy V
sudo pacman -Sy lxappearance
find /usr/share/icons -type d -name "cursors"
nvim .local/share/icons
ln -s /usr/share/icons/macOS/cursors ~/.local/share/icons/default/cursors
cat .local/share/nvim-kickstart/lazy/tokyonight.nvim/extras/xresources/tokyonight_day.Xresources
cd /usr
nautilus
sudo nautilus
nautilus admin:/
yay -S ninvaders
yay -S moon-buggy 
statx
rm .config/tmux
sudo pacman list
cmatrix --bule
cmatrix --blue
cmatrix -c
cmatrix -C blue
cmatrix -C red
cmatrix -C black
cmatrix -C grey
cmatrix -C white
cmatrix -C yellow
cmatrix -C cyan
starx
;
clear
curl --help
curl https://jiorockers.kim/files/Telugu%20Movies/Telugu%202024%20Movies/The%20Greatest%20of%20All%20Time%20(2024)%20Telugu%20HDRip%20(HQ%20Line%20Audio)/GOAT%20Telugu%20HDRip%20Single%20Part%20(HQ%20Line%20Audio)/GOAT%20(2024)%20Telugu%20HDRip%20Single%20Part%20(HQ%20Line%20Audio).mp4 -o Movie.mp4
curl "https://jiorockers.kim/files/Telugu%20Movies/Telugu%202024%20Movies/The%20Greatest%20of%20All%20Time%20(2024)%20Telugu%20HDRip%20(HQ%20Line%20Audio)/GOAT%20Telugu%20HDRip%20Single%20Part%20(HQ%20Line%20Audio)/GOAT%20(2024)%20Telugu%20HDRip%20Single%20Part%20(HQ%20Line%20Audio).mp4" -o Movie.mp4
sudo kill -9 <PID>\

sudo kill -9 <PID>
ps aux | grep pacman\

sudo kill -9 14945
sudo pacman -S android-tools\

sudo pacman -Sy android-tools\

sudo pacman -Rdd python-protobuf\

sudo pacman -S protobuf\

yay -S android-tools\

adb kill-server\
adb start-server\

sudo pacman -S python-protobuf\

adb devices\

sudo pacman -S android-udev\

sudo udevadm control --reload-rules\
sudo udevadm trigger\

sudo adb devices\

adb push ~/Movie.mp4 /storage/emulated/0/Download/Movie.mp4
rm Movie.mp4
zprof
time 
nvm_version
compinit -C\

chsh yagna
echo $SHELL
sudo ./bin/zsh
cat $(fzf)
sudo /bin/zsh
pp\\

pp\

ping google.com
startx\\

cd Code/CI-CD/
/bin/zsh-5.9
/bin/zsh
cat .zshenv
echo $PATH
curl -s https://ohmyposh.dev/install.sh | bash -s
sudo 
ls -la
sudo pacman -Syu unzip
sudo pacman -S unzip
cd-
yay -S oh-my-posh
exec zsh
oh-my-posh print primary --config sample.json --shell uni
start
cc
dc
time
zsh
shjdjh
skbd
sdbgdssd
sdg
,shbsdh
cd Code
cd ML
mv Amazon ../Archive
ls Desktop
ls Documents
rm Documents
rm -rf Documents
rm -rf Music 
ls Pictures
ls Pictures/Camera
rm -rf Pictures
ls Videos
rm -rf Videos
ls Templates
ls sudo
cat sudo
ls Public
rm -rf Templates Public
XRDb -merge ~/.Xresourices\

cd Code/Portal/client\\

go mod
go mod init
go get github.com/gorilla/mux
curl -v -X POST http://localhost:8080/api/check-email -H "Content-Type: application/json" -d '{"email": "testuser@svnit.ac.in"}'\

curl -X POST http://localhost:8080/api/check-email -H "Content-Type: application/json" -d '{"email": "testuser@svnit.ac.in"}'\

go get -u github.com/gorilla/handlers\

go get github.com/jub0bs/cors
curl -X POST http://localhost:8080/api/check-email -H "Content-Type: application/json" -d '{"email": "testuser@coed.svnit.ac.in"}'\

curl -X POST http://localhost:8080/api/check-email -H "Content-Type: application/json" -d '{"Email": "testuser@coed.svnit.ac.in"}'\

air\\

go get github.com/rs/cors
go mod tidy
go get -u github.com/gorilla/handlers
man curl
man curl -X
curl "http://[fe80::3%25eth0]/"
curl google.com
curl http://www.google.com/
curl -i http://www.google.com
curl -I http://localhost:8080/api/check-email
curl -I http://localhost:8080/api/check-email/
curl -I http://localhost:8080/login
curl -I http://localhost:8080/login/
curl -I https://localhost:8080/login/
curl -I https://localhost:8080/login
curl -I https://localhost:8080/api/check-email
curl -I https://localhost:8080
curl -I http://localhost:8080
curl -I http://localhost:8080/
curl -X POST http://localhost:8080/api/check-email -H "Content-Type: application/json" -d '{"email": "your_email@svnit.ac.in"}'\

curl -X POST http://localhost:8080/api/check-email -H "Content-Type: application/json" -d '{"email": "your_email@coed.svnit.ac.in"}'\

curl POST http://localhost:8080/api/check-email -H "Content-Type: application/json" -d '{"email": "your_email@coed.svnit.ac.in"}'\

curl POST http://localhost:8080/api/check-email -d '{"email": "your_email@coed.svnit.ac.in"}' -H "Content-Type: application/json"\

curl http://localhost:8080/api/check-email -H "Content-Type: application/json" -d '{"email": "your_email@coed.svnit.ac.in"}'\

curl -i http://localhost:8080/api/check-email -H "Content-Type: application/json" -d '{"email": "your_email@coed.svnit.ac.in"}' | jq\

curl http://localhost:8080/api/check-email -H "Content-Type: application/json" -d '{"email": "your_email@coed.svnit.ac.in"}' | jq\

go get gopkg.in/gomail.v2\

curl -i http://localhost:8080/api/check-email -H "Content-Type: application/json" -d '{"email": "your_email@coed.ac.in"}'\

curl -i http://localhost:8080/api/check-email -H "Content-Type: application/json" -d '{"email": "your_email@coed.svnit.ac.in"}'\

curl -i http://localhost:8080/api/check-email -H "Content-Type: application/json" -d '{"email": "u22cs104@coed.svnit.ac.in"}'\

sudo pacman -S gparted  # For Arch-based systems\

sudo pacman -S gparted\

sudo gparted\

mkdir 976-Div-2
cat 1.cpp
cd 9
cd 976-Div-2
1
tldr
cat man
man 
man man
ls /bin
ls /usr/bin
ls /usr/bin | fzf
cd Code/CI-CD
ls lab-5
ls pulse
cat pulse/cookie
rm -rf ~/.config/pulse
cat app.py
curl https://127.0.0.1:5000/items
curl http://127.0.0.1:5000/items
sudo docker build -t flask-microservice .\
 
cd Code/CI-CD/lab-5
cd Code/CI-CD/lab-5\\

python3 app_2.py
cp ../lab-5 ../lab-6
cp -r ../lab-5 ../lab-6
mv app.py app1
mv app_2.py app2/app.py
cp Dockerfile app1/
cp Dockerfile app2/
cp requirements.txt app1/
cp requirements.txt app2/
ls app1
ls app2
cp app1/Dockerfile ../lab-5
docker build -t lab-6-app-1 .
sudo docker build -t lab-6-app-1 .
cd app1
cat Dockerfile
cd lab-4
docker compose up
cd Code/CI-CD/lab-4
cd backend
node server.js
cwd
sudo docker ps
mkdir ~/Code/ML/lab-5
mv Untitled.ipynb ~/Code/ML/lab-5
mv test.csv ~/Code/ML/lab-5
mv train.csv ~/Code/ML/lab-5
conda install seabon
conda install seaborn
curl https://www.kaggle.com/code/brysonjbanks/an-exploration-of-l1-and-l2-regularization
stratx
pulseaudio -v
rm -rf ~/.config/pulse\

jhb
whoami
oh-my-posh get shell
oh-my-posh upgrade
sudo oh-my-posh upgrade
dhbdshb
sudo pacman -S flatpak
flatpak install flathub io.github.zen_browser.zen
yay -S zen-browser-bin 1.0.1.a.7
flatpak uninstall io.github.zen_browser.zen org.freedesktop.Platform org.freedesktop.Platform.ffmpeg-full org.freedesktop.Platform.GL.default org.freedesktop.Platform.GL.nvidia-560-35-03 org.freedesktop.Platform.openh264
flatpak uninstall io.github.zen_browser.zen
sudo pacman -R flatpak
cd ~/.config/nvim-own
cd ~/.config/nvim-test
mv ~/.config/nvim-test/lua/custom ~/.config/nvim-own/lua
cp ~/.config/nvim-test/lua/custom ~/.config/nvim-own/lua
cp -r ~/.config/nvim-test/lua/custom ~/.config/nvim-own/lua
adb push ~/Downloads/com.google.android.apps.pixel.agent_0.24.302.22.release.661465091-685_minAPI34\(arm64-v8a\)\(nodpi\)_apkmirror.com.apk /storage/emulated/0/Documents/Apk/
man adb pull
adb pull /storage/emulated/0/Download/miles-morales-in-jacket-spiderman-desktop-wallpaper.jpg ~/Self/pictures/Wallpapers_Desktop
tmux new -n Portal
xev --help
man xev
showkey
man showkey 
showkey -s
showkey --scancodes
showkey -k
showkey -v
showkey -a
xev 
tmux attach
sudo pacman -S sqlite\

sqlite3 --version\

go get github.com/mattn/go-sqlite3\

go mod tidy\

sudo pacman -S sqlite3
yay -S sqlite-utils
la tmp
ls tmp
git commit -m "02 Oct,2024: Added DB Integration and REST(JSON) Api calls with CROS"
git log
curl -i http://localhost:8080/login -H "Content-Type: application/json" -d '{"email": "u22cs104@coed.svnit.ac.in"}'\

curl -i http://localhost:8080/login -H "Content-Type: application/json" -d '{"email": "u22cs104svnit.ac.in"}'\

go get golang.org/x/crypto/bcrypt
npx shadcn-ui add form input select button textarea\

npm install @tailwindcss/forms\

npx shadcn-ui init\

npx shadcn@latest add form\

npx shadcn@latest add form input select button textarea\

.tables\

npm install zod
npm install react-hook-form zod @hookform/resolvers\

npm install react-hook-form\

	wd
pwd
npx shadcn@latest add separator\

npx shadcn@latest add textarea\

npx shadcn-ui@latest add input\
npx shadcn-ui@latest add button\
npx shadcn-ui@latest add command\
npx shadcn-ui@latest add toast\
npx shadcn-ui@latest add popover\
npx shadcn-ui@latest add scroll-area
npx shadcn@latest add input\
npx shadcn@latest add button\
npx shadcn@latest add command\
npx shadcn@latest add toast\
npx shadcn@latest add popover\
npx shadcn@latest add scroll-area
npm install react-phone-number-input
npm install --save-dev typescript @types/react @types/react-dom\

npx tsc --init\

[200~curl -X POST -F "email=test@example.com" \\
             -F "name=Test User" \\
             -F "room=101" \\
             -F "mobile=1234567890" \\
             -F "description=Issue with water supply." \\
             -F "complainType=Facilities" \\
             -F "hostel=Hostel A" \\
             -F "file=@path/to/your/file.txt" \\
             http://localhost:8080/submitComplaint
ls Downloads
cat Downloads/Model.md
curl -X POST -F "email=test@example.com" \\
             -F "name=Test User" \\
             -F "room=101" \\
             -F "mobile=1234567890" \\
             -F "description=Issue with water supply." \\
             -F "complainType=Facilities" \\
             -F "hostel=Hostel A" \\
             -F "file=~/Downloads/Model.md" \\
             http://localhost:8080/submitComplaint\

curl -X POST -F "email=test@example.com" \\
             -F "name=Test User" \\
             -F "room=101" \\
             -F "mobile=1234567890" \\
             -F "description=Issue with water supply." \\
             -F "complainType=Facilities" \\
             -F "hostel=Hostel A" \\
             -F "file=~/Downloads/Model.md" \\
             http://localhost:8080/form\

curl -X POST -F "email=test@example.com" \\
             -F "name=Test User" \\
             -F "room=101" \\
             -F "mobile=1234567890" \\
             -F "description=Issue with water supply." \\
             -F "complainType=Facilities" \\
             -F "hostel=Hostel A" \\
             http://localhost:8080/form\

mkdir uploads
ls uploads
ls ../lab-5
cd ../
mkdir lab-7
cd ../lab-7
c/1
.1/
fastf
cmatrix -C magenta
gparted
fdisk
fdisk --help
/dev/snd
ls /dev/snd
sudo pacman -Sy libadwaita
nvim ~/.config/zsh/.zshrc
sudo find / -name nautilus.desktop\

sudo nano /usr/share/applications/nautilus.desktop\

sudo nvim /usr/share/applications/nautilus-autorun-software.desktop
chmod +x $(fzf)
GTK_THEME=Adwaita:dark nautilus
nano ~/.local/share/applications/nautilus-dark.desktop\
\

nvim ~/.config/rofi
update-desktop-database ~/.local/share/applications\

nvidia-smi\

GTK_THEME="Adwaita:dark" nautilus
cal
chmod +x ~/Downloads/i3lock-fancy.sh
./Downloads/i3lock-fancy.sh
chmod +x Code/Archive/test.sh
sudo pacman -S scrot\

sudo pacman -S monitoring-plugins
echo "Monitor: $monitor_x, $monitor_y, Width: $monitor_width, Height: $monitor_height"\
echo "Resized Image: Width: $resized_width, Height: $resized_height"\

echo "$monitor_info"\
echo "$monitor_dimensions"\

[ -f "$custom_image" ] && echo "Custom image found || echo "Custom image not found\!"\
\
\

scrot /tmp/screen.png
yazi /tmp
magick /tmp/screen.png -blur 0x50 /tmp/screen_blur.png\

monitor_info=$(xrandr --query | grep ' connected')\
monitor_count=$(echo "$monitor_info" | wc -l)\

xrandr --query | grep ' connected' | wc -l
monitor_dimensions=$(echo "$monitor_line" | awk '{print $3}')
monitor_line
eDP-1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 344mm x 194mm\
HDMI-1 connected 1280x1024+1920+0 (normal left inverted right x axis y axis) 376mm x 301mm\

xrandr --query | grep ' connected'
awk '{print $3}'
xrandr --query | grep ' connected' | awk '{print $3}'
rm /tmp/screen_000.png
xrandr --query | grep ' connected' | awk '{for (i=1; i<=NF; i++) if ($i ~ /[0-9]+x[0-9]+\+/) print $i}'
xrandr --query | grep ' connected' 
\
monitor_info=$(xrandr --query | grep ' connected' | awk '{for (i=1; i<=NF; i++) if ($i ~ /[0-9]+x[0-9]+\+/) print $i}')\
monitor_width=$(echo $monitor_info | grep -oP '^[0-9]+(?=x)')\
monitor_height=$(echo $monitor_info | grep -oP '(?<=x)[0-9]+(?=\+)')\
monitor_x=$(echo $monitor_info | grep -oP '\+\K[0-9]+(?=\+)')\
monitor_y=$(echo $monitor_info | grep -oP '\+\K[0-9]+$')\
\
echo "Monitor: X=$monitor_x, Y=$monitor_y, Width=$monitor_width, Height=$monitor_height"\

./Code/Archive/test.sh
sudo lsof -i :5000\

sudo docker run -p 5000:5000 flask-microservice
cd app2
sudo docker build -t lab-6-app-2 .
sudo docker run -p 5001:5001 lab-6-app-2
cd lab-6
sudo docker run -p 5000:5000 lab-6-app-1
unzip ~/Downloads/lab_6.zip
mv lab_6 ../lab_6
cd Code/CI-CD/lab-6
cd Code/CI-CD/lab_6
cd ../lab_6
sudo docker compose up
unzip Blue\ and\ Grey\ Modern\ Simple\ Business\ Proposal\ Cover\ Page.zip
man xinit
clear && echo "" && ls | grep
clear && echo "" && ls | grep Down
cd Code/ML/
mkdir lab-6
mv Downloads/Untitled.ipynb Code/ML/lab-6/KNN.ipynb
git clone https://github.com/sarrost/dotfiles.git /tmp/
ls /tmp
git clone https://github.com/sarrost/dotfiles.git /tmp/Dots
mv /tmp/Dots/dotfiles/neovim ~/.dotfiles/.config/nvim-test
cd .dotfiles
mv ~/.dotfiles/.config/nvim-test ~/.config/nvim-test-1
mv ~/.config/nvim-test ~/.config/nvim-test-2
mv ~/.config/nvim-test-1 ~/.config/nvim-test
mv nvim-test/.config/nvim nvim-test
ls nvim-test
rm nvim-test/.config
ls nvim-test/nvim
mv nvim-test/nvim/ nvim-test/
mv nvim-test/nvim/ nvim-test
uname
echo $COLOR
export COLOR="#FF5733"  # A bright orange\
polybar toph &\

export COLOR="#ff5733"  # A bright orange\
polybar toph &\

echo $COLOR\

polybar-msg cmd restart\

export COLOR="#FF5733"\
echo "Color is set to $COLOR"\
polybar toph &\

sudo pacman -S bluez-libs\

yay -S polybar-git\

chmod +x ~/.config/polybar/bluetooth_status.sh\

cd Code/PPA
cd lab-5
cd Code/PPA/lab-5
cat 1.c
cd ../lab-6
cd ../lab-5
mpicc 2.c -o 2
mpirun -np 4 ./2
mpicc 3.c -o 3
mpirun -np 4 ./3
mpicc 1.c -o 1
mpirun -np 4 ./1
sudo pacman -Sy speedtest-cli
speedtest
c=1
while true; do echo "Hello $c"; let c=c+1; sleep 1; done
tmux a
top
cd .config/nvim-test
rm -rf .config
ls nvim
mv nvim ../nvimm
rm -rf nvim-test
mv nvimm nvim-test
git clone --depth 1 https://github.com/wbthomason/packer.nvim\\
 ~/.local/share/nvim/site/pack/packer/start/packer.nvim\

rm .local/share/nvim/site/pack/packer/start/packer.nvim
rm ~/.local/share/nvim/site/pack/packer/start/packer.nvim
rm -rf ~/.local/share/nvim/site/pack/packer/start/packer.nvim
git clone --depth 1 https://github.com/wbthomason/packer.nvim \\
~/.local/share/nvim/site/pack/packer/start/packer.nvim\

git clone --depth 1 https://github.com/wbthomason/packer.nvim \\
~/.local/share/nvim-test/site/pack/packer/start/packer.nvim\

\:q
qq
rm /var/lib/pacman/db.lck\

sudo rm /var/lib/pacman/db.lck\

tmux ls
flatpak
sudo pacman -Sy flatpak
sudo pacman -S lutrus
sudo pacman -S lutris
flatpak list
sudo lutris
flatpak install flathub net.lutris.Lutris
sudo pacman -R lutris
lutris
flatpak uninstall Lutris
du Games
du -sh Games
rm -rf Games
exit
ll
cd Code/PPA/lab-6
git clone https://github.com/NvChad/starter ~/.config/nvim-test
cd Code/Portal/client
cd Code/Portal/
cd uploads
yazi
cd ../client
cd src
python
sudo pacman -S interception-caps2esc\

touch /etc/udevmon.yaml
sudo touch /etc/udevmon.yaml
echo "- JOB: "intercept -g $DEVNODE | caps2esc | uinput -d $DEVNODE"\
  DEVICE:\
    EVENTS:\
      EV_KEY: [KEY_CAPSLOCK, KEY_ESC]\
" >> /etc/udevmon.yaml
sudo echo "- JOB: "intercept -g $DEVNODE | caps2esc | uinput -d $DEVNODE"\
  DEVICE:\
    EVENTS:\
      EV_KEY: [KEY_CAPSLOCK, KEY_ESC]\
" >> /etc/udevmon.yaml
sudo nvim /etc/udevmon.yaml
sudo systemctl enable --now udevmon.service
sudo systemctl enable --now udevmon.service\

sudo rm /etc/udevmon.yam
sudo rm -rf /etc/udevmon.yam
sudo systemctl disable --now udevmon.service\

systemctl status udevmon
sudo nvim /etc/systemd/system/udevmon.service
rm /etc/systemd/system/udevmon.service
sudo rm /etc/systemd/system/udevmon.service
adb devices
mv ~/Downloads/71.cpp ~/Code/SS/lab-7/1.cpp
gcc 1.c -o 1
cat ../lab-5/prod.txt
sudo ./[A
cd -
fzf
zf cwd=~
fzf cwd=~
fzf --help
cd Code/SS/lab-7
nvim-kickstart
nvim-lazy
tree
nvim-test
nvim-test-2
nvim-exp
rm -rf .config/nvim-exp
rm -rf .config/nvim-kickstart
rm -rf .config/nvim-test
rm -rf .config/nvim-test-2
ls .config
ls ~/.config
rm -rf nvim-lazy nvim-own
nvimm
ls .config | grep nvim
rm -rf .config/nvim-lazy
rm -rf .git
rm -rf .gitignore
rm -rf README.md
rm -rf .x11
mv .stow-local-ignore .stow-global-ignore
cd .config
cp nvim nvim-own
cp -r nvim nvim-own
cd ~/.dotfiles/.config/
man ln\\

ln -s nvim-own ~/.config/nvim-own
rm -rf .config/nvim-own
ln -s ~/.dotfile/.config/nvim-own ~/.config/nvim-own
ls ~/.config | grep nvim
cd ~/.dotfiles/.config/nvim-own
rm -rf ~/.config/nvim-own
mv .config/pulse ~/.config/pulse
stow .
ls ~
rm -rf ~/.x11
cat .config/nvim-own/lua/plugins/init.lua
cp ~/.config/nvim/lua/plugins/treesitter.lua ~/.config/nvim-own/lua/plugins
cp ~/.config/nvim/.stylua.toml ~/.config/nvim-own/
mv ~/Downloads/autex.cpp ~/Code/Archive
cat lua/colors/ayudark.lua
cat init.lua
mv lua/colors /
mv lua/colors
mv lua/colors colors
ls colors
cat .config/nvim-own/colors/ayudark.lua
git clone https://github.com/NvChad/starter ~/.config/nvim-nv && nvim-nv
neofetch
x
time zsh --interactive -c exit
rm -rf colors
cd core
cp ~/.config/nvim/lua/plugins/init.lua ~/.config/nvim-own/lua/plugins
cmatrix
fastfetch
nvim-own\\

cd ../nvim-own
nvim-own \\
\\

curl https://raw.githubusercontent.com/NvChad/ui/refs/heads/v3.0/lua/nvchad/stl/default.lua -o ~/.config/nvim-own/lua/config/stl.lua
curl https://raw.githubusercontent.com/NvChad/ui/refs/heads/v3.0/lua/nvchad/stl/utils.lua -o ~/.config/nvim-own/lua/config/utils.lua
cd lua
cd config
curl https://raw.githubusercontent.com/NvChad/ui/refs/heads/v3.0/lua/nvconfig.lua -o ~/.config
curl https://raw.githubusercontent.com/NvChad/ui/refs/heads/v3.0/lua/nvconfig.lua -o ~/.config/nvim-own/lua/nvconfig.lua
cd .config/nvim-nv
nvim-own 
git commit
cd Code/CI-CD/lab-6/app2
git diff
date
base64
man base64
base64 "Hello World"
base64 Hello World
base64 Hell
base64 --help
base64 -
d
man gm
games
sudo docker ps -a | cut -d ' ' -f1 | sudo xargs docker rm
sudo docker ps -a
git clone https://github.com/joshnewans/dockerfile_example.git
cd dockerfile_example
sudo docker build -t ros
cat ~/.config/zsh/.history | fzf
sudo docker build -t ros .
sudo docker images 
sudo docker run -it --user ros --network=host --ipc=host -v=$PWD/source:/my_source_code -v /tmp/.X11-unix/:/tmp/.X11-unix:rw --env=DISPLAY ros
sudo docker run -it --network=host --ipc=host -v=$PWD/source:/my_source_code -v /tmp/.X11-unix/:/tmp/.X11-unix:rw --env=DISPLAY ros
lvmdiskscan
bash
cd dev
cd /
cd mnt
ls /dev
cd /dev
ls sda1
cd sda1
cat sda1
sudo cat sda1
sudo cat sda
yagna
mnm
V
sudo mkdir -p /mnt/ubuntu\
sudo mount /dev/nvme0n1p3 /mnt/ubuntu  # Adjust this to match your actual Ubuntu partition\

df -h\

sudo apt autoremove\
sudo apt clean\

blkid /dev/nvme0n1p3\

blkid /dev/nvme0n1p5\

sudo nano /etc/fstab\

sudo mount /dev/nvme0n1p5 /mnt\
sudo mount --bind /dev /mnt/dev\
sudo mount --bind /proc /mnt/proc\
sudo mount --bind /sys /mnt/sys\
sudo chroot /mnt\

sudo mkdir -p /mnt/ubuntu\
sudo mkdir -p /mnt/dev\
sudo mkdir -p /mnt/proc\
sudo mkdir -p /mnt/sys\

sudo mount /dev/nvme0n1p3 /mnt/ubuntu\

sudo mount --bind /dev /mnt/dev\
sudo mount --bind /proc /mnt/proc\
sudo mount --bind /sys /mnt/sys\

sudo umount /mnt/dev\
sudo umount /mnt/proc\
sudo umount /mnt/sys\
sudo umount /mnt/ubuntu\

sudo reboot\

sudo mkdir /mnt/ubuntu\
sudo mount /dev/nvme0n1p8 /mnt/ubuntu  # Adjust this to your root partition\

sudo mount --bind /dev /mnt/ubuntu/dev\
sudo mount --bind /proc /mnt/ubuntu/proc\
sudo mount --bind /sys /mnt/ubuntu/sys\
sudo chroot /mnt/ubuntu\

sudo chroot /mnt/ubuntu\

sudo chroot /mnt/ubuntu bash\

ls /boot
sudo rm -rf /mnt/ubuntu\
sudo mkdir /mnt/ubuntu\

lablk
ls /mnt/ubuntu/usr/bin\

sudo ls /mnt/ubuntu/yagna[200~sudo umount /mnt/ubuntu
sudo pacman -S lsof
sudo lsof +D /mnt/ubuntu\

sudo fuser -m /mnt/ubuntu\

sudo fuser -k /mnt/ubuntu\

mount | grep /mnt/ubuntu\

sudo umount -l /mnt/ubuntu\

sudo sync\

sudo mount /dev/nvme0n1p5 /mnt/ubuntu
ls /mnt/ubuntu/yagna
ls /mnt/ubuntu
sudo umount /mnt/ubuntu\

sudo fsck /dev/nvme0n1p5\

ls /mnt\

rebot
sudo gparted
sudo update-grub
reboot
lsblk
sudo mount /dev/nvme0n1p1 /boot
sudo grub-install --target=x86_64-efi --efi-directory=/boot --boot-loader-id=GRUB
sudo grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
sudo grub-mkconfig -o /boot/grub/grub.cfg
sudo efibootmgr
sudo efibootmgr -o 0003
sudo reboot
lscpi
pacman -Fy lsusb 
sudo pacman -Fy lsusb 
sudo pacman -Sy usbutils
lsusb
htop
yay -S zen-browser-bin 1.0.1.a.8
ctags
sudo pacman -Sy ctags
vim 
cd ~/Code/Portal
cd ~/Code/Portal/client
npm run dev\\
\\

ctags -R
vim client/src/App.jsx
ctags -R .
rm tags
nvim $(fzf)
cd 
cd .vim
cd .config/nvim-own
nvim-nv
l
cd .dotfiles/.config
mv nvim nvimmm\\

mv nvim-own nvim
mv nvimmm nvim-own
cd .config/nvim
nvim-own
nvim\\

cd Code/Code-Forces
mkdir 978-Div-2
cd 978-Div-2
cd Code/Code-Forces/978-Div-2
4 5
3 1 1 3
g++ 1.cpp -o 1
./1
g++ 2.cpp -o 2
g++ 2_.cpp -o 2
./2
vim
nvim test.cpp
g++ 3.cpp -o 3
./3
sudo docker pull vamsi6486/myapp
sudo docker images
curl https://127.0.0.1:5000/
curl https://127.0.0.1:5000/mars
curl -X POST -F "email=test@example.com" \\
             -F "name=Test User" \\
             -F "room=101" \\
             -F "mobile=1234567890" \\
             -F "description=Issue with water supply." \\
             -F "complainType=Facilities" \\
             -F "hostel=Hostel A" \\
             http://localhost:5000/mars\

curl -X POST -F "name":"Yagna" /\
             http://localhost:5000/mars\

curl -X POST -F "name":"Yagna" \\

curl -X POST -F "name":"Yagna" \\
-F "address":"Fuck" \\
-F "acres":30 \\
http:localhost:5000/mars
curl -X POST -F "name=Yagna" \\
-F "address=Fuck" \\
-F "acres=30" \\
http:localhost:5000/mars
curl -X POST -F "name=Yagna" \\
-F "address=Fuck" \\
-F "acres=30" \\
 http://localhost:5000/mars
sudo docker run -p 5000:5000 vamsi6486/myapp
curl -X POST -F "name_give=Yagna" \\
-F "address_give=Fuck" \\
-F "size_give=30" \\
 http://localhost:5000/mars
curl http://localhost:5000/mars\

git clone https://github.com/Vamshi6486/marslandsale.git
cd marslandsale
cd ~/.dotfiles
git staus
cd
git tatus
git status
ls Dockerfile.zip
mv Dockerfile.zip ~/Code/Archive
cd ~/Code/Archive
mkdir temp
mv Dockerfile.zip temp
cd temp
unzip Dockerfile.zip
conda install pymango
conda install pymongo
python3 app.py
cd Code/Archive
cd ~/Downloads
rm -rf marslandsale static templates venv
cd Code/ML
mkdir ~/Code/ML/lab-7
mv Downloads/logistic-regression-classifier-tutorial.ipynb ~/Code/ML/lab-7/Logistic-Regression.ipynb
mv Downloads/weatherAUS.csv.zip Code/ML/lab-7
unzip weatherAUS.csv.zip
rm weatherAUS.csv.zip
conda install catagorical-encoders
ruff
sudo pacman -S ruff
lspci
starrx
cat /proc/swaps
cd Code/Portal
cd client
.
npm run dev
sqlite3 users.db\

nvim 
git add .
git commit -m "Before Refactoring of Backend"
git push origin main
git push
git remote add origin https://github.com/Yagna-rao15/hostel-section-portal.git\
git branch -M main\
git push -u origin main
gs
git pull
go get github.com/Yagna-rao15/hostel-portal/api/handlers
go run ./main.go
cp _main.go main.go
air
cd ~/.config/nvim
nvidia-smi
cd Code/SS
cd lab-7
git clone https://github.com/imlegend19/LR-0--Parsing.git
python3 ma
conda install pyfiglet
conda install conda-forge::pyfiglet
cd LR-0--Parsing
python3 main.py
conda install bioconda::perl-term-table
conda config --add channels conda-forge\
conda install pytables
cd Code/SS/lab-7/
sudo systemctl restart bluetooth\

bluetoothctl
shutdown
ss
ip addr
sudo docker network ls
bridge link
cal 2**16
cal --help
cal -3
cal -5
cal -y
sudo pacman -Syu
yay -S zen-browser-bin
zen-browser -v
xxx `c\
c
cd Code/ML/lab-7
pp
conda activate ML
..
jupyter notebook
cd Downloads
ls
ls *.ipynb
mv an-exploration-of-l1-and-l2-regularization.ipynb ~/Code/ML/lab-5/Regularization.ipynb
c
startx
tmux
nvim
q
;q
: 1729619743:0;nvim
: 1729619792:0;gs
: 1729619803:0;git add .
