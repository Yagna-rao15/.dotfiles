return {}
--   "hrsh7th/nvim-cmp",
--   event = "InsertEnter",
--   dependencies = {
--     {
--       -- snippet plugin
--       "L3MON4D3/LuaSnip",
--       dependencies = "rafamadriz/friendly-snippets",
--       opts = { history = true, updateevents = "TextChanged,TextChangedI" },
--       config = function(_, opts)
--         require("luasnip.loaders.from_vscode").lazy_load()
--         require("luasnip.loaders.from_vscode").lazy_load { paths = vim.g.vscode_snippets_path or "" }
--
--         -- snipmate format
--         require("luasnip.loaders.from_snipmate").load()
--         require("luasnip.loaders.from_snipmate").lazy_load { paths = vim.g.snipmate_snippets_path or "" }
--
--         -- lua format
--         require("luasnip.loaders.from_lua").load()
--         require("luasnip.loaders.from_lua").lazy_load { paths = vim.g.lua_snippets_path or "" }
--
--         vim.api.nvim_create_autocmd("InsertLeave", {
--           callback = function()
--             if
--                 require("luasnip").session.current_nodes[vim.api.nvim_get_current_buf()]
--                 and not require("luasnip").session.jump_active
--             then
--               require("luasnip").unlink_current()
--             end
--           end,
--         })
--       end,
--     },
--
--     -- autopairing of (){}[] etc
--     {
--       "windwp/nvim-autopairs",
--       opts = {
--         fast_wrap = {},
--         disable_filetype = { "TelescopePrompt", "vim" },
--       },
--       config = function(_, opts)
--         require("nvim-autopairs").setup(opts)
--
--         -- setup cmp for autopairs
--         local cmp_autopairs = require "nvim-autopairs.completion.cmp"
--         require("cmp").event:on("confirm_done", cmp_autopairs.on_confirm_done())
--       end,
--     },
--
--     -- cmp sources plugins
--     {
--       "saadparwaiz1/cmp_luasnip",
--       "hrsh7th/cmp-nvim-lua",
--       "hrsh7th/cmp-nvim-lsp",
--       "hrsh7th/cmp-buffer",
--       "hrsh7th/cmp-path",
--     },
--   },
--   opts = function()
--     vim.api.nvim_set_hl(0, "CmpGhostText", { link = "Comment", default = true })
--     local cmp = require "cmp"
--     local defaults = require "cmp.config.default" ()
--     local auto_select = true
--     return {
--       auto_brackets = {},
--       completion = {
--         completeopt = "menu,menuone,noinsert" .. (auto_select and "" or ",noselect"),
--       },
--       preselect = auto_select and cmp.PreselectMode.Item or cmp.PreselectMode.None,
--       mapping = cmp.mapping.preset.insert {
--         ["<CR>"] = cmp.mapping.confirm {
--           behavior = cmp.ConfirmBehavior.Insert,
--           select = true,
--         },
--
--         ["<Tab>"] = cmp.mapping(function(fallback)
--           if cmp.visible() then
--             cmp.select_next_item()
--           elseif require("luasnip").expand_or_jumpable() then
--             require("luasnip").expand_or_jump()
--           else
--             fallback()
--           end
--         end, { "i", "s" }),
--
--         ["<S-Tab>"] = cmp.mapping(function(fallback)
--           if cmp.visible() then
--             cmp.select_prev_item()
--           elseif require("luasnip").jumpable(-1) then
--             require("luasnip").jump(-1)
--           else
--             fallback()
--           end
--         end, { "i", "s" }),
--       },
--       sources = cmp.config.sources({
--         { name = "nvim_lsp" },
--         { name = "path" },
--       }, {
--         { name = "buffer" },
--       }),
--       -- experimental = {
--       --   ghost_text = {
--       --     hl_group = "CmpGhostText",
--       --   },
--       -- },
--       sorting = defaults.sorting,
--     }
--   end,
--   config = function(_, opts)
--     require("cmp").setup(opts)
--   end,
-- }
